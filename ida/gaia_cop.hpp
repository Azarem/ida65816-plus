#pragma once


struct cop_def {
	short op;
	char size;
	char mem[7];
	bool noret;
};


static const struct cop_def cop_lst[0x100] = {
	{ 0x00 },
	{ 0x01, 4, "Ob" },
	{ 0x02, 4, "Ob" },
	{ 0x03, 5, "bww" },
	{ 0x04, 1, "b" },
	{ 0x05, 1, "b" },
	{ 0x06, 1, "b" },
	{ 0x07, 1, "b" },
	{ 0x08, 2, "w" },
	{ 0x09, 1, "b" },
	{ 0x0A, 1, "b" },
	{ 0x0B },
	{ 0x0C },
	{ 0x0D, 2, "bb" },
	{ 0x0E, 2, "bb" },
	{ 0x0F, 2, "bb" },
	{ 0x10, 2, "bb" },
	{ 0x11 },
	{ 0x12, 2, "bb" },
	{ 0x13, 2, "c" },
	{ 0x14, 4, "bbc" },
	{ 0x15, 2, "c" },
	{ 0x16, 2, "c" },
	{ 0x17, 2, "c" },
	{ 0x18, 2, "c" },
	{ 0x19, 4, "bO" },
	{ 0x1A, 3, "bc" },
	{ 0x1B, 3, "bc" },
	{ 0x1C, 3, "bc" },
	{ 0x1D, 3, "bc" },
	{ 0x1E, 3, "bc" },
	{ 0x1F, 2, "c" },
	{ 0x20, 4, "bbc" }, 
	{ 0x21, 3, "bc" },
	{ 0x22, 2, "bb"},
	{ 0x23 },
	{ 0x24, 1, "b" },
	{ 0x25, 2, "bb" },
	{ 0x26, 8, "bwwbw" },
	{ 0x27, 1, "b" },
	{ 0x28, 6, "wwc" },
	{ 0x29, 7, "bwwc" },
	{ 0x2A, 8, "wccc" },
	{ 0x2B, 8, "wccc"},
	{ 0x2C, 4, "cc" },
	{ 0x2D },
	{ 0x2E, 2, "bb" },
	{ 0x2F, 3, "bc" },
	{ 0x30, 3, "bbbc" },
	{ 0x31, 10, "ccccc" },
	{ 0x32, 1, "b" },
	{ 0x33 },
	{ 0x34 },
	{ 0x35 },
	{ 0x36 },
	{ 0x37, 1, "b" },
	{ 0x38, 2, "bb" },
	{ 0x39 },
	{ 0x3A },
	{ 0x3B, 4, "bC" },
	{ 0x3C, 3, "C" },
	{ 0x3D },
	{ 0x3E, 2, "w" },
	{ 0x3F, 2, "w" },
	{ 0x40, 4, "wc" },
	{ 0x41, 4, "wc" },
	{ 0x42, 3, "bbb" },
	{ 0x43 },
	{ 0x44, 6, "bbbbc" }, //Incremental conditional return
	{ 0x45, 6, "bbbbc" }, //^
	{ 0x46 },
	{ 0x47 },
	{ 0x48 },
	{ 0x49, 3, "bc" },
	{ 0x4A },
	{ 0x4B, 3, "bbb" }, //Odd conditional processing
	{ 0x4C, 1, "b" }, //^
	{ 0x4D, 2, "w" },
	{ 0x4E, 2, "w" },
	{ 0x4F, 7, "Oww" },
	{ 0x50, 6, "Obbb" },
	{ 0x51, 6, "OO" },
	{ 0x52, 3, "bbb" },
	{ 0x53 },
	{ 0x54, 3, "wb" },
	{ 0x55, 3, "bw" },
	{ 0x56 },
	{ 0x57, 3, "C" },
	{ 0x58, 2, "c" },
	{ 0x59, 2, "c" },
	{ 0x5A, 2, "c" },
	{ 0x5B, 2, "w" },
	{ 0x5C, 2, "w" },
	{ 0x5D, 2, "c" },
	{ 0x5E, 2, "c" },
	{ 0x5F, 3, "wb" },
	{ 0x60, 2, "bb" }, 
	{ 0x61, 4, "ww" },
	{ 0x62, 3, "bc" },
	{ 0x63, 3, "bbb" },
	{ 0x64 },
	{ 0x65, 6, "wwbb" },
	{ 0x66, 5, "wwb" },
	{ 0x67, 2, "bb" },
	{ 0x68, 2, "c" },
	{ 0x69, 4, "w" },
	{ 0x6A, 2, "c" },
	{ 0x6B, 2, "o" },
	{ 0x6C, 2, "bb" },
	{ 0x6D, 2, "bb" },
	{ 0x6E },
	{ 0x6F },
	//GAP of invalid offsets
	{ 0x70 },
	{ 0x71 },
	{ 0x72 },
	{ 0x73 },
	{ 0x74 },
	{ 0x75 },
	{ 0x76 },
	{ 0x77 },
	{ 0x78 },
	{ 0x79 },
	{ 0x7A },
	{ 0x7B },
	{ 0x7C },
	{ 0x7D },
	{ 0x7E },
	{ 0x7F },
	//GAP
	{ 0x80, 1, "b" },
	{ 0x81, 2, "bb" },
	{ 0x82, 2, "bb" },
	{ 0x83, 3, "bbb" },
	{ 0x84, 2, "bb" },
	{ 0x85, 3, "bbb" },
	{ 0x86, 3, "bbb" },
	{ 0x87, 4, "bbbb" },
	{ 0x88, 3, "O" },
	{ 0x89 },
	{ 0x8A },
	{ 0x8B },
	{ 0x8C, 1, "b" },
	{ 0x8D, 1, "b" },
	{ 0x8E, 1, "b" },
	{ 0x8F, 1, "b" },
	{ 0x90, 2, "bb" },
	{ 0x91, 2, "bb" },
	{ 0x92, 3, "bbb" },
	{ 0x93 },
	{ 0x94, 4, "bbbb" },
	{ 0x95 },
	{ 0x96, 2, "w" },
	{ 0x97, 2, "w" },
	{ 0x98, 2, "w" },
	{ 0x99, 3, "C" },
	{ 0x9A, 5, "Cw" },
	{ 0x9B, 3, "C" },
	{ 0x9C, 5, "Cw" },
	{ 0x9D, 7, "wbww" },
	{ 0x9E, 9, "Cwww" },
	{ 0x9F, 7, "wbww" },
	{ 0xA0, 9, "Cwww" },
	{ 0xA1, 5, "Cw" },
	{ 0xA2, 5, "Cw" },
	{ 0xA3, 9, "Cwww" },
	{ 0xA4, 7, "Cbbw" },
	{ 0xA5, 7, "Cbbw" },
	{ 0xA6, 8, "wbbbbw" },
	{ 0xA7 },
	{ 0xA8 },
	{ 0xA9 },
	{ 0xAA, 1, "b" },
	{ 0xAB, 1, "b" },
	{ 0xAC, 2, "bb" },
	{ 0xAD, 1, "b" },
	{ 0xAE, 1, "b" },
	{ 0xAF, 1, "b" },
	{ 0xB0, 2, "bb" }, //*** checked
	{ 0xB1 },
	{ 0xB2 },
	{ 0xB3 },
	{ 0xB4 },
	{ 0xB5 },
	{ 0xB6, 1, "b" },
	{ 0xB7, 1, "b" },
	{ 0xB8 },
	{ 0xB9 },
	{ 0xBA },
	{ 0xBB },
	{ 0xBC, 2, "bb" },
	{ 0xBD, 3, "O" },
	{ 0xBE, 4, "bbo", true }, //Variable-length pointer table
	{ 0xBF, 2, "o" }, //Offset to data chunk
	{ 0xC0, 2, "c" },
	{ 0xC1 },
	{ 0xC2 },
	{ 0xC3, 5, "Cw" },
	{ 0xC4, 3, "C", true },
	{ 0xC5, 0, "", true },
	{ 0xC6, 2, "c" },
	{ 0xC7, 3, "C" },
	{ 0xC8, 2, "c" },
	{ 0xC9, 2, "c"},
	{ 0xCA, 1, "b" },
	{ 0xCB },
	{ 0xCC, 1, "b" },
	{ 0xCD, 2, "w" },
	{ 0xCE, 1, "b" },
	{ 0xCF, 2, "w" },
	{ 0xD0, 4, "bbc" },
	{ 0xD1, 5, "wbc" },
	{ 0xD2, 2, "bb" },
	{ 0xD3, 3, "wb" },
	{ 0xD4, 3, "bc" },
	{ 0xD5, 1, "b" },
	{ 0xD6, 3, "bc" },
	{ 0xD7, 3, "bc" },
	{ 0xD8 },
	{ 0xD9, 4, "wo", true }, //Instruction pointer table
	{ 0xDA, 1, "b" },
	{ 0xDB, 2, "w" },
	{ 0xDC },
	{ 0xDD },
	{ 0xDE },
	{ 0xDF },
	{ 0xE0, 0, "", true}, //noret
	{ 0xE1 }, //noret
	{ 0xE2, 3, "wb" },
};

//Unit Test samples:
//
// C2A6B3 -> C2B0A3   A8 -> [ PHP - A8 - A16 - PLP ] -> (A8!)   Stack check pushes invalid value back to caller  **fixed by checking
// C2A6C8                                                       Branch around REP
// C2B1BB -> C2B20E 											Previous func does SEP, how to recover default?
